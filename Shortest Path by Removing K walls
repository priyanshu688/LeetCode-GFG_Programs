Program :-
Shortest Path by Removing K walls

Given a 2-D binary matrix of size n*m, where 0 represents an empty space while 1 represents a wall you cannot walk through. You are also given an integer k.
You can walk up, down, left, or right. Given that you can remove up to k walls, return the minimum number of steps to walk from the top left corner (0, 0) to the bottom right corner (n-1, m-1).
Note: If there is no way to walk from the top left corner to the bottom right corner, return -1.


Example 1:-

Input: n = 3, m = 3, k = 1
mat = {{0, 0, 0},
       {0, 0, 1},
       {0, 1, 0}}
Output:-
4

Explanation:-
We can remove any one of the walls and reach the bottom in 4 moves.  
Example 2:-

Input:-
n = 2, m = 2, k = 0
mat[] = {{0, 1},
         {1, 0}}
Output:
-1
Explanation:-
There's no way of reaching the bottom corner without removing any walls.

Your Task:-
The task is to complete the function shotestPath() which takes three integers n, m, and k and also a matrix of size n*m as input and returns the minimum number of steps to walk from the top left corner to the bottom right corner.


Constraints:-
1 ≤ n,m ≤ 50
0 ≤ k ≤ n*m
Top left and bottom right corners doesn't have 1


Expected Time Complexity: O(n*m*k).
Expected Auxiliary Space: O(n*m*k).

Solution:-

class Solution {
    static int shotestPath(int[][] mat, int n, int m, int k) {
        
        int[][]dirs={{1,0},{0,1},{0,-1},{-1,0}};
        Queue<int[]> q=new LinkedList<>();
        q.add(new int[]{0,0,k});
        boolean[][]vis=new boolean[n][m][k+1];
        vis[0][0][k]=true;
        int dis=0;
        while(!q.isEmpty()){
            int sz=q.size();
            while(sz-->0){
                int[]curr=q.remove();
                if(curr[0]==n-1 && curr[1]==m-1)return dis;
                for(int[]d:dirs){
                    int i=curr[0]+d[0];
                    int j=curr[1]+d[1];
                    int obs=curr[2];
                    if(i<n && j<m && i>=0 && j>=0){
                        if(mat[i][j]==0 && !vis[i][j][obs]){
                            q.add(new int[]{i,j,obs});
                            vis[i][j][obs]=true;
                        }else if(mat[i][j]==1 && obs>0 && !vis[i][j][k]){
                          q.add(new int[]{i,j,obs-1});
                          vis[i][j][obs-1]=true;
                        }
                    }
                }
            }
            dis++;
        }
        return -1;
    }
};

